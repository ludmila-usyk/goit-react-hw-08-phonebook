{"version":3,"sources":["components/UserMenu.js","components/AuthNav.js","components/AppBar/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","store/store.js","index.js","redux/contacts/contacts-actions.js","redux/auth/auth-selectors.js","redux/auth/auth-actions.js","redux/auth/auth-operations.js","redux/auth/auth-reducer.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","redux/contacts/contacts-operations.js"],"names":["mapDispatchToProps","onLogOut","authOperations","logOut","connect","state","name","authSelectors","getUserName","Button","color","type","onClick","AuthNav","component","NavLink","exact","to","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","textDecoration","isAuthenticated","getIsAuthenticated","classes","className","AppBar","position","Container","maxWidth","Toolbar","id","Typography","variant","Component","redirectTo","routeProps","render","props","restricted","HomePage","lazy","RegisterPage","LoginPage","ContactsPage","App","this","onGetCurrentUser","fallback","path","getCurrentUser","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","contacts","contactsReducer","auth","persistReducer","authReducer","devToolss","process","persistor","persistStore","ReactDOM","StrictMode","loading","document","getElementById","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","isLogIn","user","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","dispatch","a","post","response","data","message","logIn","getState","persistedToken","get","initialUserState","email","createReducer","_","payload","setError","error","combineReducers","getFilter","filter","getAllContacts","items","getFilteredContact","createSelector","normalizedFilter","toLowerCase","contact","includes","addContact","number","then","catch","deleteContact","delete","fetchContacts"],"mappings":"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","file":"static/js/main.2323f7fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { connect } from 'react-redux';\r\nimport { authOperations, authSelectors } from '../redux/auth';\r\n\r\nconst UserMenu = ({ name, onLogOut }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <p>Welcome, {name}!</p>\r\n      </div>\r\n      <Button color=\"inherit\" type=\"button\" onClick={onLogOut}>\r\n        Logout\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  name: authSelectors.getUserName(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogOut: authOperations.logOut,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\r\n","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst AuthNav = () => {\r\n  return (\r\n    <>\r\n      <Button color=\"inherit\" component={NavLink} exact to=\"/register\">\r\n        Registration\r\n      </Button>\r\n      <Button color=\"inherit\" component={NavLink} exact to=\"/login\">\r\n        Login\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Container } from '@material-ui/core';\r\nimport { NavLink } from 'react-router-dom';\r\nimport UserMenu from '../UserMenu';\r\nimport AuthNav from '../AuthNav';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport { connect } from 'react-redux';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textDecoration: 'none',\r\n  },\r\n}));\r\n\r\nconst AppBarComp = ({ isAuthenticated }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Container maxWidth=\"lg\">\r\n          <Toolbar id=\"toolbar-menu\">\r\n            <Typography\r\n              variant=\"h6\"\r\n              color=\"inherit\"\r\n              className={classes.title}\r\n              component={NavLink}\r\n              exact\r\n              to=\"/\"\r\n            >\r\n              Main\r\n            </Typography>\r\n\r\n            {isAuthenticated && (\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"inherit\"\r\n                className={classes.title}\r\n                component={NavLink}\r\n                exact\r\n                to=\"/contacts\"\r\n              >\r\n                PhoneBook\r\n              </Typography>\r\n            )}\r\n\r\n            {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppBarComp);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\nconst PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\nconst PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PublicRoute);\r\n","import React, { Component, Suspense, lazy } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { authOperations } from './redux/auth';\r\nimport AppBarComp from './components/AppBar/AppBar';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PablicRoute from './components/PublicRoute';\r\n\r\nconst HomePage = lazy(() =>\r\n  import('./pages/HomePage' /* webpackChunkName: \"home-page\" */),\r\n);\r\nconst RegisterPage = lazy(() =>\r\n  import('./pages/RegisterPage' /* webpackChunkName: \"register-page\" */),\r\n);\r\nconst LoginPage = lazy(() =>\r\n  import('./pages/LoginPage' /* webpackChunkName: \"login-page\" */),\r\n);\r\nconst ContactsPage = lazy(() =>\r\n  import('./pages/ContactsPage' /* webpackChunkName: \"contacts-page\" */),\r\n);\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetCurrentUser();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <AppBarComp />\r\n        <Suspense fallback={<p>Wait...</p>}>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <PablicRoute\r\n              path=\"/register\"\r\n              restricted\r\n              redirectTo=\"/contacts\"\r\n              component={RegisterPage}\r\n            />\r\n            <PablicRoute\r\n              path=\"/login\"\r\n              restricted\r\n              redirectTo=\"/contacts\"\r\n              component={LoginPage}\r\n            />\r\n            <PrivateRoute\r\n              path=\"/contacts\"\r\n              redirectTo=\"/login\"\r\n              component={ContactsPage}\r\n            />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </Suspense>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onGetCurrentUser: authOperations.getCurrentUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { authReducer } from '../redux/auth';\r\nimport { contactsReducer } from '../redux/contacts';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  },\r\n  middleware,\r\n  devToolss: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './store/store';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/filterContact');\r\n","/* eslint-disable import/no-anonymous-default-export */\r\n\r\nconst getIsAuthenticated = state => state.auth.isLogIn;\r\nconst getUserName = state => state.auth.user.name;\r\n\r\nexport default { getIsAuthenticated, getUserName };\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const registerRequest = createAction('auth/registerRequest');\r\nexport const registerSuccess = createAction('auth/registerSuccess');\r\nexport const registerError = createAction('auth/registerError');\r\n\r\nexport const loginRequest = createAction('auth/loginRequest');\r\nexport const loginSuccess = createAction('auth/loginSuccess');\r\nexport const loginError = createAction('auth/loginError');\r\n\r\nexport const logoutRequest = createAction('auth/logoutRequest');\r\nexport const logoutSuccess = createAction('auth/logoutSuccess');\r\nexport const logoutError = createAction('auth/logoutError');\r\n\r\nexport const getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nexport const getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nexport const getCurrentUserError = createAction('auth/getCurrentUserError');\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from 'axios';\r\nimport {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n} from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => async dispatch => {\r\n  dispatch(registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(registerError(error.message));\r\n  }\r\n};\r\n\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(loginRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(logoutRequest());\r\n\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n\r\n  dispatch(getCurrentUserRequest());\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\nexport default { token, register, logIn, logOut, getCurrentUser };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n  registerSuccess,\r\n  registerError,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n} from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [registerSuccess]: (_, { payload }) => payload.user,\r\n  [loginSuccess]: (_, { payload }) => payload.user,\r\n  [logoutSuccess]: () => initialUserState,\r\n  [getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [registerSuccess]: (_, { payload }) => payload.token,\r\n  [loginSuccess]: (_, { payload }) => payload.token,\r\n  [logoutSuccess]: () => null,\r\n});\r\n\r\nconst setError = (_, { payload }) => payload;\r\n\r\nconst error = createReducer(null, {\r\n  [registerError]: setError,\r\n  [loginError]: setError,\r\n  [logoutError]: setError,\r\n  [getCurrentUserError]: setError,\r\n});\r\n\r\nconst isLogIn = createReducer(false, {\r\n  [registerSuccess]: () => true,\r\n  [loginSuccess]: () => true,\r\n  [getCurrentUserSuccess]: () => true,\r\n  [registerError]: () => false,\r\n  [loginError]: () => false,\r\n  [getCurrentUserError]: () => false,\r\n  [logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({ user, isLogIn, token, error });\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getFilter = state => state.contacts.filter;\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\nconst getFilteredContact = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    if (filter) {\r\n      return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n    }\r\n    return contacts;\r\n  },\r\n);\r\n\r\nexport default { getFilter, getFilteredContact, getAllContacts };\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { combineReducers } from 'redux';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  fetchContactSuccess,\r\n  changeFilter,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error.message));\r\n  }\r\n};\r\n\r\n// const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error.message)));\r\n  };\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n"],"sourceRoot":""}